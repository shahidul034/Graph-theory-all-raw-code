#include<iostream>
#include<map>
#include<vector >
#include<stdio.h>
#include<algorithm>
#include<stdio.h>
#define pii pair<int,int>
typedef long long int ll;//1507034
using namespace std;
int FindRepresentative(int);
vector<pair<int,pair<int,int>>>vec;
int parent[100];
int cnt=0;
vector<pair<int,int>>vi;
int makeset(int u)
{
	parent[u]=u;
}
int init_disjoint_set(int N)
{
	for(int i=1;i<=N;i++)
	{
		makeset(i);
	}
}
int Union(int a,int b)
{
	int u=FindRepresentative(a);
	int v=FindRepresentative(b);
	if(u!=v)
	{
		parent[u]=v;
	}
}
int FindRepresentative(int r)
{
	if(parent[r]==r)return r;
	parent[r]=FindRepresentative(parent[r]);
	return parent[r];
}
void kruskal_algo()
{
		vector<pair<int,pair<int,int>>>::iterator it=vec.begin();
	for( ;it!=vec.end() ;it++ )
	{
		int u=(it->second).first;
		int v=(it->second).second;
		if(FindRepresentative(u)!=FindRepresentative(v))
		{
			Union(u,v);
			cnt+=it->first;
			vi.push_back (make_pair(u,v));
		}
	}
}
int main()
{
	freopen("in.txt","r",stdin);
	int edge;cin>>edge;
	while(edge--)
	{
		int a,b,c;
		cin>>a>>b>>c;
		vec.push_back({c, {a, b}});
	}
	sort(vec.begin(),vec.end());
	init_disjoint_set(9);
    kruskal_algo();
    cout<<"cost: "<<cnt<<endl;
    vector<pair<int,int>>::iterator it=vi.begin();
    for( ;it!=vi.end() ;it++ )
	{
		cout<<it->first<<" "<<it->second<<endl;
	}

}
